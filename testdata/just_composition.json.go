// Code generated by github.com/nofun97/adobo, DO NOT EDIT.

package schema

// testdata
type JustComp struct {
    Age *interface{} `json:"age,omitempty" yaml:"age,omitempty"`
    Animals *map[string]interface{} `json:"animals,omitempty" yaml:"animals,omitempty"`
    Blank *interface{} `json:"blank,omitempty" yaml:"blank,omitempty"`
    Condref *interface{} `json:"condref,omitempty" yaml:"condref,omitempty"`
    Data *interface{} `json:"data,omitempty" yaml:"data,omitempty"`
    Name *interface{} `json:"name,omitempty" yaml:"name,omitempty"`
    Referenced *JustCompDefsAnimal `json:"referenced,omitempty" yaml:"referenced,omitempty"`
}

type JustCompAgeOpt0 float

type JustCompAgeOpt1 float

type JustCompAnimalsValue interface{}

type JustCompAnimalsValueAnimalsOpt0 string

type JustCompAnimalsValueAnimalsOpt1 string

type JustCompCondrefOpt0 *JustCompDefsAnimal

type JustCompDataOpt0 string

type JustCompDataOpt1 float

type JustCompDataOpt2 struct {
    Animal *string `json:"animal,omitempty" yaml:"animal,omitempty"`
    Vegetable *string `json:"vegetable,omitempty" yaml:"vegetable,omitempty"`
}

type JustCompDefsAnimal interface{}

type JustCompDefsAnimalAnimalOpt0 *JustCompDefsAnimal

type JustCompDefsAnimalAnimalOpt1 string

type JustCompDefsAnimalAnimalOpt2 struct {
    Vertebrate *string `json:"vertebrate,omitempty" yaml:"vertebrate,omitempty"`
}

type JustCompDefsAnimalAnimalOpt3 struct {
    Invertebrate *string `json:"invertebrate,omitempty" yaml:"invertebrate,omitempty"`
}

type JustCompNameOpt0 string