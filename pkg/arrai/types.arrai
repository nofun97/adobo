# this script takes a json value representing a jsonschema and convert it into a
# list of type declarations

# FIXME: this should create a data structure that other languages can use

let reduce = //{github.com/arr-ai/arrai/contrib/util}.reduce;

let goPrimitiveType = {
    'string':  'string',
    'number':  'float',
    'boolean': 'bool',
    'integer': 'int',
};

let safeName = //{./util}.safeName;

# Turn a schema into a nested tuple of types and metadata
let rec parse = \name \schema

    let conditional = \conditions
    (
        conditional: conditions =>
            parse($`${name}Opt${.@}`, .@item)
    );

    let type = cond schema {

        {'properties': properties, ...}:
            (
                fields: properties => (
                    parse(.@, .@value) +> (
                        tags: {
                            |name  , value             |
                            ('json', $`${.@},omitempty`),
                            ('yaml', $`${.@},omitempty`),
                        }
                    )
                ),
                required: schema('required')?:[] => .@item,
            )
        ,
        {'patternProperties': patternProperties, ...}:
            cond {
                # TODO:
                # Specific value type is only supported when patternProperties
                # has exactly one key value pair. The generated code currently
                # does not do any regex validation and it assumes that all the
                # keys are strings of any form.
                patternProperties count = 1: (
                    key: (type: (primitive: 'string')),
                    value: parse(name, (patternProperties single).@value),
                ),

                # Currently only handles map with any value. Anything with
                # extra patterns will become map[string]interface{}
                _: (
                    key:   (type: (primitive: 'string')),
                    value: (type: (primitive: 'interface{}')),
                ),
            }
        ,
        {'allOf': cons, ...}:
            conditional(cons)
        ,
        {'anyOf': cons, ...}:
            conditional(cons)
        ,
        {'oneOf': cons, ...}:
            conditional(cons)
        ,
        {'$ref': ref, ...}:      (ref: ref),
        {'items': items, ...}:   (items: parse(name, items)),
        {'type': 'object', ...}: (fields: {}),
        {'type': 'array', ...}:  (items: parse(name, {})),
        {'type': type, ...}:     (primitive: goPrimitiveType(type)?:'interface{}'),
        {'not': _, ...}:         (primitive: 'interface{}'),
        {}:                      (primitive: 'interface{}'),
        _:                       (undefined: schema),
    } +>
    cond schema {
        {'$defs': defs, ...}:
            (
                defs: defs => (
                    parse(.@, .@value)
                )
            )
        ,
        _: ()
    };

    (:type, :name, description: schema('description')?:{})
;

let schemaToType = \schema parse(schema('title')?:'Schema', schema);

# Because parse returns a tree of type and metadata and the renderer expects
# pure type tree, this function simply removes metadata of the nested type.
let simplifyNestedType = \t
    t +> (
        type +>:
            cond t.type {
                (:items, ...): (items: items.type),
                (:key, :value, ...): (key: key.type, value: value.type),
                _: t.type
            }
    )
;

# Turn a giant nested type into a set of types.
let spreadType = \type
    let isSimple = \t
        let simple = \t
            cond t {
                (:primitive, ...): true,
                (:typeRef, ...): true,
                (:fields, ...): fields = {},
            }
        ;
        simple(t) || simple(t.items?.type:{}) || (simple(t.key?.type:{}) && simple(t.value?.type:{}))
    ;
    let varName = \path safeName(//seq.join('', path >> //str.title(.)));
    let typeRef = \path (typeRef: varName(path), pointer: true);

    # Resolve a pointer reference in the form: A#B
    # A: Relative path from current schema to target schema (note: if empty then current schema is referenced).
    # B: Path from schema root (note: if empty then the schema itself is being referenced).
    #
    # This implementation makes no attempt to handle references outside the current schema.
    # https://niem.github.io/json/reference/json-schema/references/
    # http://json-schema.org/understanding-json-schema/structuring.html
    let resolveRef = \path \ref cond {
        !//seq.has_prefix('#', ref): //error($`cross-schema references not supported: ${ref}`),
        _: typeRef([path(0)] ++ //seq.split('/', //seq.trim_prefix('#/', ref))),
    };

    # Visit each type in the type tree and return a set of new types generated
    # by each level of the type tree. When complex type is found, the current
    # type is transformed so that any nested complex types inside the current
    # type are referred by a type reference and then it spreads those complex
    # nested types.
    let rec spread = \path \type
        cond type.type {

            (:fields, :required, ...):
                fields &&
                let spreadField = \addPath \field spread(path ++ [field.name] ++ addPath, field.|name, type, description|);
                let newTypes = //rel.union(
                    # only spread complex fields
                    # for maps and arrays, only spread their complex values so
                    # that not all complex maps and arrays are aliased into
                    # another type
                    fields filter .type {
                        (:fields, ...): fields && spreadField({}, .),
                        (:key, :value, ...): !isSimple(value.type) && spreadField(['value'], value),
                        (:items, ...): !isSimple(items.type) && spreadField(['item'], items),
                        (:conditional, ...): //rel.union(
                            conditional where !(.).type.undefined?:false =>
                                spreadField({}, .)),
                    }
                )
                ;
                newTypes with (
                    type +> (
                        type +>: (
                            fields: fields =>
                                let field = (
                                    cond {isSimple(.type): simplifyNestedType(.)} ||
                                    # change complex types into type reference. For
                                    # map and array, only change their values into
                                    # reference because they're inlineable.
                                    let subtype = \type \suffix cond type {
                                        (:ref, ...): resolveRef(path, ref),
                                        (:conditional, ...): (primitive: 'interface{}'),
                                        _: typeRef(path ++ [.name, suffix]) };
                                    cond .type {
                                        (:fields, ...):      . +> (type: typeRef(path ++ [.name])),
                                        (:key, :value, ...): . +> (type: (key: key.type, value: subtype(value.type, 'value'))),
                                        (:items, ...):       . +> (type: (items: subtype(items.type, 'item'))),
                                        (:ref, ...):         . +> (type: resolveRef(path, ref)),
                                        (:conditional, ...): . +> (type: (primitive: 'interface{}')),
                                    }
                                );
                                # TODO: something is broken in arr.ai, when it tries to `+> (type +>: (pointer: .name !<: required))` it seems to be broken
                                field +> (name: varName([.name]), type: field.type +> (pointer: .name !<: required))
                        ),
                        :path,
                    )
                )
            ,
            (:items, ...):
                cond {
                    isSimple(items.type): {simplifyNestedType(type) +> (:path)},
                    _:
                        (spread(path ++ ['item'], items)) with
                        (type +> (type+>: (items: (typeRef: varName(path ++ ['item']), pointer: true)), :path)),
                }
            ,
            (:key, :value, ...):
                cond {
                    (key.type.primitive?:{} != 'string'): //error($`key should be string: ${key}`),
                    isSimple(value.type): {simplifyNestedType(type) +> (:path)},
                    _:
                        (spread(path ++ ['value'], value)) with
                        (type +> (type +>: (key: key.type, value: (typeRef: varName(path ++ ['value']), pointer: true)), :path)),
                }
            ,
            (:conditional, ...):
                # TODO: Verify. This doesn't match the container type patterns above.
                {type +> (type:(primitive: 'interface{}'), :path)} |
                //rel.union(conditional where !(.).type.undefined?:false =>
                        let subs = (spread(path ++ [.name], .));
                        subs => . +> (path: path ++ [.name])
                )
            ,

            # This is here to handle types at the root, but this is
            # unlikely to happen since these are usually embedded within complex types.
            (:primitive, ...): {type +> (:path)},
            (:ref): {type +> (type: resolveRef(path, ref))},

            _: //error($`undefined type: ${type.type}`),
        } |
        cond type.type {
            (:defs, ...):
                //rel.union(defs =>
                    spread(path ++ ['defs', .name], .))
        }
    ;
    spread([type.name], type) => .~|path| +> (name: varName(.path))
;

let typeSet = \schema spreadType(schemaToType(schema));

(
    :parse,
    :schemaToType,
    :spreadType,
    :typeSet,
)
